make the ER diagram in the draw.io
check the ER diaram from resources/templates/SmartContactE-R.html and open it in the Google. then only the file can be shown 

we have to download the bootstrap starter templte and add it to the Base.html
<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  </body>
</html>



//in the controller (in HomeController) in the methode argument if the binding result is not put right after
// the @ModelAttribute then it will not work properly


Spring security
if a genuine credential is injected then we can login. all those pages that only a logged in user can browse
we have to protect them. a page can be proteted by its url.
now there might be multiple urls that we may have to protect to do that we have to make a the url in a partucular pattern
such as those url consists of 'user' in it can do those tasks

Method Level Security:
spring provides not only the class level but the method level that may verifies with the ROLE

1.using Secured Annotation 
@Secured("ROLE_ADMIN") 
public void deleteUser(int userId) { 
   // Method logic here 
}
2.using PreAuthorize Annotation
@PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #userId == principal.userId)") 
public void updateUser(int userId) { 
// Method logic here 
}


whenever we add the springboot secrity dependency then it secure all the pages automatically 
by putting the user in the username and password from console to the password section can open it 
and by puttinglogout in the url we can simply logout.
but here all pages are secured bydefault. 
so we have to customised secure pages and we have to take the credentials from the  Databases

how to it?
1.using user detail interface provided by Springboot it consists of all the userdetails related abstrac mehtode 
so we have to make a class and provide this interfaces implementation 
2.we have to provide User Detail Service implementation by a class. 
3.we have to make a configuration class that extends DAO . from that we are gonna take the user credentials.


here to login put the email and and password    (never put name and password )


loginpage()-we can use custom login page 
loginProcessingUrl()- url to submit the username 
defaultSuccessUrl()- after login the page we want to show
faliureUrl()- if login failed this url page wil open 


by putting the logout in the url we can logout simple 
If we are useing the spring security then by default we can login by saing th:href="@{/logout}". and ir will be logged out 
no need to make a different logout page

 to use the icons we add the css in the uBase
 https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css
 and then we can add the icons 
 search o google
 font awesome icons 5 cdngo to the website fontawesome  get the font url. 
 
 client side validation has put to the ad_conatct_form. and that is by using required in every field.
 
 
 we can use TinyMCE to the text editor in the add_contact_form form to get some better writing experience 
 
 
Q.when to use redirect ? 
from a current handler if we are calling any page then normal url mapping is there but 	
when the current handler is calling a another handler by url then we should use redirect	





